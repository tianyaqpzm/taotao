package com.taotao.dataIntegrity.publicVerification;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.taotao.dataIntegrity.db.DBOperation;
import it.unisa.dia.gas.jpbc.Element;

public class MerkleTree {
	  private static final String FILETAG="filetag";//
	 private MessageDigest md = MessageDigest.getInstance("SHA-256");

	protected PublicInfor pubInfor;
	  // transaction List
//	  List<String> txList;
	  Map<String,byte[]> txList;
	  // Merkle Root
	  public byte[] root;
	  
	  /**
	   * constructor
	   * @param txList transaction List 
	   */
	  public MerkleTree(Map<String,byte[]> txList) throws NoSuchAlgorithmException {
	    this.txList = txList;
//	    pubInfor=new PublicInfor();
	  }
	   
	  /**
	   * execute merkle_tree and set root.
	   */
	  public void merkle_tree() {
	    
	    List<byte[]> tempTxList = new ArrayList<>();
	    // 获取所有的 value
	    for (int i = 1; i <= this.txList.size(); i++) {
	    	String test = " "+Integer.toString(i);
	        tempTxList.add(this.txList.get(" "+Integer.toString(i)));
	    }
	   
	    List<byte[]> newTxList = getNewTxList(tempTxList);
	   
	    while (newTxList.size() != 1) {
	      newTxList = getNewTxList(newTxList);
	    }
	    
	    this.root = newTxList.get(0);
	  }
	  
	  /**
	   * return Node Hash List.
	   * @param tempTxList
	   * @return
	   */
	  private List<byte[]> getNewTxList(List<byte[]> tempTxList) {
	    
	      List<byte[]> newTxList = new ArrayList<>();
	      int index = 0;
	      while (index < tempTxList.size()) {
	      // left
	      byte[] left = tempTxList.get(index);
	      index++;

	      // right
		  byte[] right={};
	      if (index != tempTxList.size()) {
	        right = tempTxList.get(index);
	      }

	      // sha2 hex value
		  byte[] hebing = unio(left,right);
		  byte[] cipher_byte;
		  md.update(hebing);
		  cipher_byte = md.digest();
//		  String sha2HexValue = getSHA2HexValue(hebing);
	      newTxList.add(cipher_byte);
	      index++;
	      
	    }
	    
	    return newTxList;
	  }
	  
	  /**
	   * Return hex string
	   * @param str
	   * @return
	   */
	  public byte[] getSHA2HexValue(byte[] str) {
	        byte[] cipher_byte;
	        try{
	            md.update(str);
	            cipher_byte = md.digest();
//	            StringBuilder sb = new StringBuilder(2 * cipher_byte.length);
//	            for(byte b: cipher_byte) {
//	              sb.append(String.format("%02x", b&0xff) );
//	            }
	            return cipher_byte;
	        } catch (Exception e) {
	                e.printStackTrace();
	        }
	        
	        return null;
	  }
	  
	  /**
	   * Get Root
	   * @return
	   */
	  public String getRoot() {
	    return this.root.toString();
	  }
	  
	//��ȥ��ս���У���ǩ  ���� map
	private Map<String,byte[]> readTags(){
		DBOperation dbo=new DBOperation();
		Map<String,byte[]> results=dbo.selectBatch(FILETAG, "");
		List<Element>ctags=new ArrayList<>();
//			for (int i=0;i<challenges.size();i++){
//				ctags.add((pubInfor.pairing.getG1().newElementFromBytes(results.get(String.valueOf(challenges.get(i).num)))));
//			}
//			return ctags;
		return results;
	}

	private byte[] unio(byte[] first, byte[]rest) {
		if(rest ==null){
			return first;
		}else{
			byte[] result = Arrays.copyOf(first, rest.length);
			int offset = first.length;
			System.arraycopy(rest, 0, result, offset, rest.length);
			return result;
		}
	}


	public String Encrypt(String strSrc) {
		MessageDigest md = null;
		String strDes = null;

		byte[] bt = strSrc.getBytes();
		try {
			md = MessageDigest.getInstance("SHA-256");
			md.update(bt);
			strDes = bytes2Hex(md.digest()); // to HexString
		} catch (NoSuchAlgorithmException e) {
			return null;
		}
		return strDes;
	}


	/**
	 * 将字节数组 转化为 16 进制
	 * @param bts
	 * @return
	 */
	public String bytes2Hex(byte[] bts) {
		String des = "";
		String tmp = null;
		for (int i = 0; i < bts.length; i++) {
			tmp = (Integer.toHexString(bts[i] & 0xFF));
			if (tmp.length() == 1) {
				des += "0";
			}
			des += tmp;
		}
		return des;
	}





}
